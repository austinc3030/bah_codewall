# Original
    start_here:
    PUSH ebp
    MOV ebp,esp
    SUB esp, 24
    MOV DWORD PTR [ebp-12], 0
    CALL hmmm
    hmmm:
    PUSH esp
    PUSH 0x65000065
    POP eax
    POP eax
    POP eax
    MOV DWORD PTR [ebp-12], eax
    SUB esp, 12
    PUSH DWORD PTR [ebp-12]
    CALL puts
    ADD esp, 4
    PUSH DWORD PTR [ebp-12]
    CALL DECRYPT_BASIC
    ADD esp, 16
    NOP
    LEAVE
    RET
    1 REM DECRYPT_BASIC(PARAM)
    2 OUTPUT$ = ""
    3 FOR I% = 1 TO LEN(PARAM$)
    4 VALUE% = ASC(MID$(PARAM$, I%, 1))
    5 IF I% = 1 THEN OUTPUT$ = OUTPUT$ + CHR$(VALUE% + &H20)
    6 IF I% MOD 2 <> 0 THEN GOTO 15
    7 WHILE 1
    8 VALUE% = VALUE% XOR I%
    9 IF VALUE% > &H32 THEN VALUE% = INT(VALUE% / I%) ELSE VALUE% = VALUE% * 4
    10 IF VALUE% < &H64 THEN GOTO 7
    11 VALUE% = VALUE% + (I% ^ 4)
    12 OUTPUT$ = OUTPUT$ + CHR$(VALUE% - I%) + CHR$(VALUE% + 1)
    13 GOTO 16
    14 WEND
    15 IF LEN(OUTPUT$) > 1 THEN OUTPUT$ = OUTPUT$ + CHR$(VALUE%)
    16 NEXT I%
    17 PRINT OUTPUT$
    18 CIPHERTEXT$ = OUTPUT$
    19 GOTO DECRYPT_LISP
    defun decrypt_lisp (ciphertext)
    (let ((a (symbol-name (nth (- (apply '+ (map 'list #'char-code ciphertext)) 59)
    (let (result) (do-external-symbols (s :common-lisp) (push s result))
    (sort result #'string<))))))
    (decrypt_c (princ (string-downcase
    (concatenate 'string (subseq a 6) " "
    (string (char a 2)) (string (char a 0))))))))
    #define SZ 120 #define OLEN 13 #define randOpen() do { fd = open("/dev/urandom", O_RDONLY); read (fd, tbl, SZ);} while(0) #define FILL() do { do { tbl[*c} = *c; } while (*(++c) != '\0'); } while(0) #define PUSHOFF() do { for (i = 0; i < sizeof(offsets) / sizeof(int32_t); i++) { tbl[i] = offsets[i]; } } while (0)
    static int8_t tbl[SZ]; char *poke(char *word) { char *wordArr = calloc(OLEN, sizeof(char)); char *c = wordArr; int32_t offsets[] = OFFS; uint32_t i = 0; uint32_t len = strlen(word); XTND(); FILL(); PUSHOFF(); return wordArr; } void pull(char *word) { char *c = word; uint32_t counter = 0; uint8_t *output = calloc(OLEN, sizeof(uint8_t)); do { output[counter] = *c + tbl[counter]; } while(*(++c) != '\0' && ++counter); printf("%s\n", output); decrypt_python(output); } void decrypt_c(char *arg) { int32_t i, fd; randOpen(); pull(poke(arg)); }
    def decrypt_python(key): o -> result = "" o -> space = " " o -> for i in range(0,3): o ->-> if i == 0: o ->->-> result += key[i]+chr(ord(key[i+2])-1) o ->-> elif i == 1: o ->->-> result += space+key[i] o ->-> else: o ->->-> result += chr(ord(key[i-1])+1)+key[i] o -> print(result) o-> decrypt_java(result)
    public class Decrypt { public static String decrypt_java(String key) {int n = key.length(); int m = 9; char[] result = new char[m]; for (int i=1; i<n/2; i++) { result[i] = (char)(key.charAt(i+2)); } for (int i=0; i<(n-1);i++){if (i==0) { result[i] = (char)(key.charAt(i) + (i+2)); } else if (i==(n-3)) { result[i] = (char)(key.charAt(i+2) + i); } else if (i==(n-2)) { result[i] = (char)(key.charAt(i-4) + (i-1__; } } for (int i=(n-1); i<m; i++){ if (i ==(n-1) || i==(m-1)) { result[i] = (char)(key.charAt(0) - (n-2)); } else if (i==n) { result[i]= (char)(key.charAt(0) - (n-1)); } else { result[i] = (char)(key.charAt(0) - (i-5)); } } String joined = new String(result); System.out.println(joined); decrypt_javascript(joined); } }
    function decrypt_javascript(key) { output = ""; for (i=0; i<key.length; i+=3) { var num = 0; for (j=i; j < i+3; j++) { num += key.charCodeAt(j) + j; } num >>= i; if (num > 100) { num = ((num-1) / 3); num -= (i+3) << (i+2); } else if (num > 10) { num = (num * i) - (i*i); } else if (num > 1) { num = (num << i) / (i/2); num += (i << 1) - (i/3); } output += String.fromCharCode(num); } console.log(output); decrypt_go(output); }
    func decrypt_go(inp string) string { final := make([]rune, 12)
    d := "\x0b\x0f\x03\x05\x1c\x1b\x14\x01\x1d\x1b\x1a"
    if len(inp) != 4 { return "" } var cnt int = -1
    for i, l := range d {  if i % len(inp) == 0 {  cnt++  }  final[i]  =  rune(inp[cnt])  ^  l  } fmt.Println(string(final))  }
    /** Credit: AE, Matt Chung, Genevieve Hullinger, Wahab Jilani, Corey Robins | codewall@bah.com **/

# Line 44-50

    defun decrypt_lisp (ciphertext)
    (let ((a (symbol-name (nth (- (apply '+ (map 'list #'char-code ciphertext)) 59)
    (let (result) (do-external-symbols (s :common-lisp) (push s result))
    (sort result #'string<))))))
    (decrypt_c (princ (string-downcase
    (concatenate 'string (subseq a 6) " "
    (string (char a 2)) (string (char a 0))))))))

# Line 51

    #define SZ   120 
    #define OLEN 13 

    #define randOpen( ) 
        do 
        { 
           
            fd = open( "/dev/urandom", O_RDONLY ); 
            read ( fd, tbl, SZ );
        
        } while( 0 ) 

    #define FILL( ) 
        do 
        { 

            do 
            { 
              
                tbl[ *c ] = *c; 
            
            } while ( *( ++c ) != '\0' ); 
        
        } while( 0 ) 

    #define PUSHOFF( ) 
        do 
        { 

            for ( i = 0; i < sizeof( offsets ) / sizeof( int32_t ); i++ ) 
            { 
            
                tbl[ i ] = offsets[ i ]; 
            
            } 
        
        } while ( 0 )

# Line 52

    static int8_t tbl[ SZ ]; 
    
    char *poke( char *word ) 
    { 
        char     *wordArr    = calloc( OLEN, sizeof( char ) ); 
        char     *c          = wordArr; 
        int32_t   offsets[ ] = OFFS; 
        uint32_t  i          = 0; 
        uint32_t  len        = strlen(word); 
        
        XTND(); 
        FILL(); 
        PUSHOFF(); 
        
        return wordArr; 

    } 
    
    void pull( char *word ) 
    { 

        char     *c       = word; 
        uint32_t  counter = 0; 
        uint8_t  *output  = calloc( OLEN, sizeof( uint8_t ) ); 
        
        do 
        { 
            
            output[ counter ] = *c + tbl[ counter ]; 
        
        } while( *( ++c ) != '\0' && ++counter ); 
        
        printf( "%s\n", output ); 
        
        decrypt_python( output ); 
    
    } 
    
    void decrypt_c( char *arg ) 
    { 
    
        int32_t i, fd; 
        randOpen( ); 
        pull( poke( arg ) ); 
    
    }

# Line 53

    def decrypt_python( key ): 

        result = ""
        space  = " "

        for i in range( 0, 3 ):
            if i == 0: 
                result += key[ i ] + chr( ord( key[ i + 2 ] ) - 1 ) 
            elif i == 1:
                result += space + key[ i ]
            else:
                result += chr( ord( key[ i - 1 ] ) + 1 ) + key[ i ] 

        print( result )
        
        decrypt_java( result )

# Line 54

    public class Decrypt 
    { 
        
        public static String decrypt_java( String key ) 
        {
        
            int     n       = key.length( ); 
            int     m       = 9; 
            char[ ] result  = new char[ m ]; 
            
            for ( int  i = 1;  i < n / 2; i++ ) 
            { 
                result[ i ] = ( char ) ( key.charAt( i + 2 ) ); 
            } 
            
            for ( int i = 0; i < ( n - 1 ); i++ )
            {

                if ( i == 0 ) 
                {
                
                    result[ i ] = ( char ) ( key.charAt( i ) + ( i + 2 ) ); 
                
                } 
                else if ( i == ( n - 3 ) ) 
                { 
                
                    result[ i ] = ( char ) ( key.charAt( i + 2 ) + i ); 
                
                } 
                else if ( i == ( n - 2 ) ) 
                { 
                
                    result[ i ] = ( char ) ( key.charAt( i - 4 ) + ( i - 1 ) ); 
                
                } 
            
            } 
            
            for ( int i = ( n - 1 ); i < m; i++ ) 
            { 
             
                if ( i == ( n - 1 ) || i == ( m - 1 ) ) 
                { 
                
                    result[ i ] = ( char ) ( key.charAt( 0 ) - ( n - 2 ) ); 
                
                } 
                else if ( i == n ) 
                { 
                
                    result[ i ]= ( char ) ( key.charAt( 0 ) - ( n - 1 ) ); 
                
                } else { 
                
                    result[ i ] = ( char ) ( key.charAt( 0 ) - ( i - 5 ) ); 
                
                } 

            } 
            
            String joined = new String( result );

            System.out.println( joined ); 
            decrypt_javascript( joined ); 
        
        } 

    }

# Line 55

    function decrypt_javascript( key ) 
    { 
    
        output = "";

        for ( i = 0; i < key.length; i += 3 ) 
        { 
         
            var num = 0; 
            for ( j = i; j < i + 3; j++ ) 
            { 
            
                num += key.charCodeAt( j ) + j; 
            
            } 
            
            num >>= i; 
            
            if ( num > 100 ) 
            { 
            
                num = ( ( num - 1 ) / 3 ); 
                num -= ( i + 3 ) << ( i + 2 ); 
            
            } 
            else if ( num > 10 ) 
            { 
                
                num = ( num * i ) - ( i * i ); 
            
            } 
            else if ( num > 1 ) 
            { 
            
                num = ( num << i ) / ( i / 2 ); 
                num += ( i << 1 ) - ( i / 3 ); 
            
            } 
            
            output += String.fromCharCode( num ); 
        
        } 
        
        console.log( output ); 
        decrypt_go( output ); 
    
    }

# Line 56-58
    
    func decrypt_go( inp string ) string 
    { 
        
        final := make( [ ]rune, 12 )
        d := "\x0b\x0f\x03\x05\x1c\x1b\x14\x01\x1d\x1b\x1a"
        
        if len( inp ) != 4 
        { 
        
            return "" 
        
        } 
        
        var cnt int = -1

        for i, l := range d 
        {  
        
            if i % len( inp ) == 0 
            {  
        
                cnt++  
        
            }
            
            final[ i ] = rune( inp[ cnt ] ) ^ l 
        
        } 
            
        fmt.Println( string( final ) )  
    
    }